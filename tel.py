import os
import asyncio
from aiohttp import web
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

def get_main_menu():
    buttons = [
        [KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"), KeyboardButton(text="üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")],
        [KeyboardButton(text="üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"), KeyboardButton(text="üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ")],
        [KeyboardButton(text="üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ"), KeyboardButton(text="üõ† –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="–ú–µ–Ω—é")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return markup

def get_neural_network_menu():
    main = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="DALL-E"), KeyboardButton(text="ChatGPT")],
            [KeyboardButton(text="Notion AI"), KeyboardButton(text="10WEB")],
            [KeyboardButton(text="RYTR"), KeyboardButton(text="SITEGPT")],
            [KeyboardButton(text="HEY GEN"), KeyboardButton(text="GitHub Copilot")],
            [KeyboardButton(text="Sora"), KeyboardButton(text="Eleven Labs")],
            [KeyboardButton(text="Perplexity AI"), KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]
        ],
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...',
        resize_keyboard=True
    )
    return main

@dp.message(Command("start"))
async def send_welcome(message: Message):
    welcome_text = (
        "üåü *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏!* üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∂–∏–∑–Ω–∏! üöÄ\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:\n"
        "üîπ /list ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n"
        "üîπ /menu ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ /help ‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_menu())

@dp.message(Command("menu"))
async def send_welcome(message: types.Message):
    welcome_text = (
        "üåü *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏!* üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∂–∏–∑–Ω–∏! üöÄ\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:\n"
        "üîπ /list ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n"
        "üîπ /menu ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ /help ‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_menu())

@dp.message(F.text == "–ú–µ–Ω—é")
async def menus(message: types.Message):
    welcome_text = (
        "üåü *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏!* üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∂–∏–∑–Ω–∏! üöÄ\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:\n"
        "üîπ /list ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n"
        "üîπ /menu ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ /help ‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=get_main_menu())

@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*\n\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π inline-–∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö.\n"
        "3. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üòä\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("list"))
async def show_list(message: Message):
    list_text = (
        "‚ú® *–°–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç—ã:* ‚ú®\n\n"
        "üñº *DALL-E (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: '–ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ' üê±üöÄ\n\n"
        "üìù *ChatGPT (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç: '–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –¥—Ä—É–≥—É' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!_ ‚úçÔ∏è\n\n"
        "üõ† *Notion AI (–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏: '–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é' ‚Äî –∏ –≤–æ—Ç –ø–ª–∞–Ω:\n"
        "_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –£—á—ë–±–∞, –í—Ç–æ—Ä–Ω–∏–∫: –°–ø–æ—Ä—Ç..._ üìÖ\n\n"
        "‚ú® *10Web (–í–µ–±-—Å–∞–π—Ç—ã)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ–±–µ —Å–∞–π—Ç: '–í–æ—Ç —Ç–µ–±–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫ —Å–∞–π—Ç—É' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–ì–æ—Ç–æ–≤—ã–π –ø–æ–ª–Ω–æ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–π —Å–∞–π—Ç_ üåê\n\n"
        "üìù *Rytr (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ –ª—é–±–æ–π —Å—Ç–∏–ª—å: '–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–∏—Å—å–º–æ –¥–ª—è –±–∞–±—É—à–∫–∏' ‚Äî –∏ –≤–æ—Ç 40 —à–∞–±–ª–æ–Ω–æ–≤:\n"
        "_–£–¥–æ–±–Ω—ã–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–¥ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞_ ‚úçÔ∏è\n\n"
        "üõ† *SiteGPT (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤: '–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ –∫–æ—Ñ–µ–π–Ω–∏' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–î–µ–ª–∞–µ—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞—à—É –∑–∞–¥–∞—á—É_ ü§ñ\n\n"
        "‚ú® *HeyGen (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ–±–µ –≤–∏–¥–µ–æ: '–°–æ–∑–¥–∞–π –º–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞, –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–∏' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–ì–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –≥–æ–≤–æ—Ä—è—â–µ–º –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ_ üé•\n\n"
        "üíª *GitHub Copilot (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º: '–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–ì–æ—Ç–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥_ üíª\n\n"
        "üé• *Sora (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ: '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫ –ø—Ä–æ –ª–µ—Å' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ª–µ—Å–æ–º_ üìπ\n\n"
        "üéß *Eleven Labs (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç: '–ü—Ä–æ—á–∏—Ç–∞–π —Å–∫–∞–∑–∫—É' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å, –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞_ üéôÔ∏è\n\n"
        "üõ† *Perplexity AI (–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)*\n"
        "–ü—Ä–∏–º–µ—Ä: –Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å' ‚Äî –∏ –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "_–ü–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç_ üîç\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚¨áÔ∏è"
    )
    await message.answer(list_text, parse_mode="Markdown", reply_markup=get_neural_network_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(F.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
async def show_image_gen(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="DALL-E", callback_data="image_dalle")],
        [InlineKeyboardButton(text="Stable Diffusion", callback_data="image_stablediffusion")],
        [InlineKeyboardButton(text="MidJourney", callback_data="image_midjourney")],
        [InlineKeyboardButton(text="Imagen (Google)", callback_data="image_imagen")],
        [InlineKeyboardButton(text="Make-A-Scene (Meta)", callback_data="image_makeascene")],
        [InlineKeyboardButton(text="Craiyon", callback_data="image_craiyon")],
        [InlineKeyboardButton(text="DreamStudio", callback_data="image_dreamstudio")],
        [InlineKeyboardButton(text="Artbreeder", callback_data="image_artbreeder")],
        [InlineKeyboardButton(text="GauGAN2", callback_data="image_gaugan2")]
    ])

    await message.answer(
        "üñº *–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "image_dalle")
async def show_image_dalle_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ DALL-E", url="https://openai.com/dall-e")]
    ])
    await callback.message.answer(
        "üñº *DALL-E*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ù–∞–ø–∏—à–∏ '–ö–æ—Ç –≤ —à–ª—è–ø–µ –Ω–∞ –õ—É–Ω–µ', –∏ DALL-E –Ω–∞—Ä–∏—Å—É–µ—Ç —ç—Ç–æ!\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π –∏ –¥–∏–∑–∞–π–Ω–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_stablediffusion")
async def show_image_stablediffusion_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Stable Diffusion", url="https://stability.ai/stable-diffusion")]
    ])
    await callback.message.answer(
        "üñº *Stable Diffusion*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏–ª–∏ –ø–µ–π–∑–∞–∂.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∞—Ä—Ç–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_midjourney")
async def show_image_midjourney_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ MidJourney", url="https://www.midjourney.com")]
    ])
    await callback.message.answer(
        "üñº *MidJourney*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ç—ã.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞—Ä—Ç '–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –≤ –Ω–µ–æ–Ω–µ'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_imagen")
async def show_image_imagen_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Imagen", url="https://cloud.google.com/blog/topics/developers-practitioners/introducing-imagen-2")]
    ])
    await callback.message.answer(
        "üñº *Imagen *\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–µ–π–∑–∞–∂ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∞—Ä—Ç–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_makeascene")
async def show_image_makeascene_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Make-A-Scene", url="https://ai.meta.com/blog/make-a-scene-ai-powered-image-generation/")]
    ])
    await callback.message.answer(
        "üñº *Make-A-Scene*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–±—Ä–æ—Å–∫–æ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π —Å—Ü–µ–Ω—É '–ó–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏' —Å –Ω–∞–±—Ä–æ—Å–∫–æ–º.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ë–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_craiyon")
async def show_image_craiyon_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Craiyon", url="https://www.craiyon.com")]
    ])
    await callback.message.answer(
        "üñº *Craiyon*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É '–°–æ–±–∞–∫–∞ –≤ –ø–∞—Ä–∫–µ'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –ª–µ–≥–∫–æ.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_dreamstudio")
async def show_image_dreamstudio_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ DreamStudio", url="https://dreamstudio.ai")]
    ])
    await callback.message.answer(
        "üñº *DreamStudio*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π –∞—Ä—Ç '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–µ—Å'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –¢–≤–æ—Ä–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_artbreeder")
async def show_image_artbreeder_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Artbreeder", url="https://www.artbreeder.com")]
    ])
    await callback.message.answer(
        "üñº *Artbreeder*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏–ª–∏ –ø–µ–π–∑–∞–∂.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –°–æ–∑–¥–∞–≤–∞–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∞—Ä—Ç—ã —Å –ò–ò.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "image_gaugan2")
async def show_image_gaugan2_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ GauGAN2", url="http://gaugan.org/gaugan2/")]
    ])
    await callback.message.answer(
        "üñº *GauGAN2*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–±—Ä–æ—Å–∫–æ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ–π–∑–∞–∂ '–û–∑–µ—Ä–æ –≤ –≥–æ—Ä–∞—Ö'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
async def show_text_gen(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ChatGPT", callback_data="text_chatgpt")],
        [InlineKeyboardButton(text="Grok (xAI)", callback_data="text_grok")],
        [InlineKeyboardButton(text="Claude (Anthropic)", callback_data="text_claude")],
        [InlineKeyboardButton(text="Vicuna-13B", callback_data="text_vicuna")],
        [InlineKeyboardButton(text="Mistral", callback_data="text_mistral")],
        [InlineKeyboardButton(text="Qwen (Alibaba Cloud)", callback_data="text_qwen")],
        [InlineKeyboardButton(text="HyperWrite", callback_data="text_hyperwrite")],
        [InlineKeyboardButton(text="Jenni", callback_data="text_jenni")],
        [InlineKeyboardButton(text="Rytr", callback_data="text_rytr")]
    ])

    await message.answer(
        "üìù *–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "text_chatgpt")
async def show_text_chatgpt_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ChatGPT", url="https://openai.com/chatgpt")]
    ])
    await callback.message.answer(
        "üìù *ChatGPT*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç—ã.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ú–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Å—Å–µ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ü–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ–º–∞—à–∫–æ–π –∏–ª–∏ –∏–¥–µ—è–º–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_grok")
async def show_text_grok_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Grok", url="https://x.ai/grok")]
    ])
    await callback.message.answer(
        "üìù *Grok)*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –î–∞—ë—Ç —á–µ—Å—Ç–Ω—ã–µ –∏ –ø—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–∞–≤–¥—É –æ –∫–æ—Å–º–æ—Å–µ'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–¥–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_claude")
async def show_text_claude_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Claude", url="https://www.anthropic.com/claude")]
    ])
    await callback.message.answer(
        "üìù *Claude *\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –£–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∑–∞–¥–∞—á.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü–æ–º–æ–≥–∏ —Å –ø–ª–∞–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∞'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ù–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_vicuna")
async def show_text_vicuna_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Vicuna-13B", url="https://github.com/lm-sys/vicuna-13b")]
    ])
    await callback.message.answer(
        "üìù *Vicuna-13B*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç, –æ–±—É—á–µ–Ω–Ω—ã–π –Ω–∞ –¥–∏–∞–ª–æ–≥–∞—Ö.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü—Ä–æ–≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ç–µ–º—É –∫–æ—Å–º–æ—Å–∞'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_mistral")
async def show_text_mistral_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Mistral", url="https://mistral.ai")]
    ])
    await callback.message.answer(
        "üìù *Mistral*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ú–æ—â–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –ø—Ä–æ –ò–ò'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –û—Ç–∫—Ä—ã—Ç–∞—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_qwen")
async def show_text_qwen_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Qwen", url="https://www.alibabacloud.com/en/product/qwen")]
    ])
    await callback.message.answer(
        "üìù *Qwen*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ß–∞—Ç-–±–æ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_hyperwrite")
async def show_text_hyperwrite_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ HyperWrite", url="https://hyperwrite.ai")]
    ])
    await callback.message.answer(
        "üìù *HyperWrite*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∏—Å—å–º–∞, —É—Å–∫–æ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ü–∏—à–∏ –±—ã—Å—Ç—Ä–æ.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_jenni")
async def show_text_jenni_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Jenni", url="https://jenni.ai")]
    ])
    await callback.message.answer(
        "üìù *Jenni*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –≠–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—Å—Ç–∞—Ö.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –∏ –ø–∏—à–µ—Ç –∑–∞ —Ç–µ–±—è.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "text_rytr")
async def show_text_rytr_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Rytr", url="https://rytr.me")]
    ])
    await callback.message.answer(
        "üìù *Rytr*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—ã –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –¥–ª—è –±–∞–±—É—à–∫–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –ø–∏—Å–µ–º –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")
async def show_code_gen(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="GitHub Copilot", callback_data="code_copilot")],
        [InlineKeyboardButton(text="OpenAI Codex", callback_data="code_codex")],
        [InlineKeyboardButton(text="Tabnine", callback_data="code_tabnine")],
        [InlineKeyboardButton(text="CodiumAI", callback_data="code_codiumai")]
    ])

    await message.answer(
        "üíª *–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "code_copilot")
async def show_code_copilot_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ GitHub Copilot", url="https://github.com/features/copilot")]
    ])
    await callback.message.answer(
        "üíª *GitHub Copilot*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–¥ –ø—Ä—è–º–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ü–∏—à–∏ –∫–æ–¥ –±—ã—Å—Ç—Ä–µ–µ.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "code_codex")
async def show_code_codex_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ OpenAI Codex", url="https://openai.com/blog/openai-codex")]
    ])
    await callback.message.answer(
        "üíª *OpenAI Codex*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–¥.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –∏–≥—Ä—ã'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "code_tabnine")
async def show_code_tabnine_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Tabnine", url="https://www.tabnine.com")]
    ])
    await callback.message.answer(
        "üíª *Tabnine*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –£—Å–∫–æ—Ä—è–µ—Ç –∫–æ–¥ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ IDE.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "code_codiumai")
async def show_code_codiumai_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ CodiumAI", url="https://www.codium.ai")]
    ])
    await callback.message.answer(
        "üíª *CodiumAI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞ –≤ IDE.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ")
async def show_video_gen(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Sora (OpenAI)", callback_data="video_sora")],
        [InlineKeyboardButton(text="Runway", callback_data="video_runway")],
        [InlineKeyboardButton(text="Synthesia", callback_data="video_synthesia")],
        [InlineKeyboardButton(text="Pika", callback_data="video_pika")],
        [InlineKeyboardButton(text="HeyGen", callback_data="video_heygen")]
    ])

    await message.answer(
        "üé• *–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "video_sora")
async def show_video_sora_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Sora", url="https://openai.com/sora")]
    ])
    await callback.message.answer(
        "üé• *Sora*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫ –ø—Ä–æ –ª–µ—Å'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –û–∂–∏–≤–∏ –∏–¥–µ–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "video_runway")
async def show_video_runway_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Runway", url="https://runwayml.com")]
    ])
    await callback.message.answer(
        "üé• *Runway*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –ò–ò.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –≤–∏–¥–µ–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π —Ä–æ–ª–∏–∫.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "video_synthesia")
async def show_video_synthesia_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Synthesia", url="https://www.synthesia.io")]
    ])
    await callback.message.answer(
        "üé• *Synthesia*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ —Å –≤–µ–¥—É—â–∏–º–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π —Ä–æ–ª–∏–∫ '–í–µ–¥—É—â–∏–π —á–∏—Ç–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "video_pika")
async def show_video_pika_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Pika", url="https://pika.art")]
    ])
    await callback.message.answer(
        "üé• *Pika*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–¥–µ–π.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –°–æ–∑–¥–∞–π –≤–∏–¥–µ–æ '–ö–æ—Ç–∏–∫ –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–æ–º'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –¢–≤–æ—Ä–∏ –ª–µ–≥–∫–æ.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "video_heygen")
async def show_video_heygen_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ HeyGen", url="https://www.heygen.com")]
    ])
    await callback.message.answer(
        "üé• *HeyGen*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –≥–æ–≤–æ—Ä—è—â–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–æ–∑–¥–∞–π —á–µ–ª–æ–≤–µ–∫–∞, –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ä–µ–∫–ª–∞–º—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ")
async def show_audio_gen(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Eleven Labs", callback_data="audio_elevenlabs")],
        [InlineKeyboardButton(text="Resemble AI", callback_data="audio_resemble")],
        [InlineKeyboardButton(text="Play.ht", callback_data="audio_playht")],
        [InlineKeyboardButton(text="MusicLM (Google Research)", callback_data="audio_musiclm")]
    ])

    await message.answer(
        "üéß *–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "audio_elevenlabs")
async def show_audio_elevenlabs_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Eleven Labs", url="https://elevenlabs.io")]
    ])
    await callback.message.answer(
        "üéß *Eleven Labs*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü—Ä–æ—á–∏—Ç–∞–π —Å–∫–∞–∑–∫—É'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –æ–∑–≤—É—á–∫–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "audio_resemble")
async def show_audio_resemble_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Resemble AI", url="https://www.resemble.ai")]
    ])
    await callback.message.answer(
        "üéß *Resemble AI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç –∏ –∫–ª–æ–Ω–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–û–∑–≤—É—á—å –ø–æ–¥–∫–∞—Å—Ç'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "audio_playht")
async def show_audio_playht_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Play.ht", url="https://play.ht")]
    ])
    await callback.message.answer(
        "üéß *Play.ht*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–û–∑–≤—É—á—å —Å—Ç–∞—Ç—å—é'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "audio_musiclm")
async def show_audio_musiclm_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ MusicLM", url="https://google-research.github.io/seanet/musiclm/examples/")]
    ])
    await callback.message.answer(
        "üéß *MusicLM*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–∑—ã–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ–ª–æ–¥–∏—é –≤ —Å—Ç–∏–ª–µ –¥–∂–∞–∑'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –º–µ–ª–æ–¥–∏–π.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "üõ† –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def show_tools(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Notion AI", callback_data="tools_notion")],
        [InlineKeyboardButton(text="Grammarly", callback_data="tools_grammarly")],
        [InlineKeyboardButton(text="Perplexity AI", callback_data="tools_perplexity")],
        [InlineKeyboardButton(text="Otter.ai", callback_data="tools_otter")],
        [InlineKeyboardButton(text="Whisper", callback_data="tools_whisper")],
        [InlineKeyboardButton(text="SiteGPT", callback_data="tools_sitegpt")]
    ])

    await message.answer(
        "üõ† *–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.callback_query(F.data == "tools_notion")
async def show_tools_notion_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Notion AI", url="https://www.notion.so/product/ai")]
    ])
    await callback.message.answer(
        "üõ† *Notion AI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —É—á—ë–±—ã –∏ —Ä–∞–±–æ—Ç—ã.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "tools_grammarly")
async def show_tools_grammarly_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Grammarly", url="https://www.grammarly.com")]
    ])
    await callback.message.answer(
        "üõ† *Grammarly*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "tools_perplexity")
async def show_tools_perplexity_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Perplexity AI", url="https://www.perplexity.ai")]
    ])
    await callback.message.answer(
        "üõ† *Perplexity AI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–∞ –ò–ò, –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –±—ã—Å—Ç—Ä–æ.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "tools_otter")
async def show_tools_otter_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Otter.ai", url="https://otter.ai")]
    ])
    await callback.message.answer(
        "üõ† *Otter.ai*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –†–∞—Å—à–∏—Ñ—Ä—É–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "tools_whisper")
async def show_tools_whisper_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Whisper", url="https://openai.com/research/whisper")]
    ])
    await callback.message.answer(
        "üõ† *Whisper*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.callback_query(F.data == "tools_sitegpt")
async def show_tools_sitegpt_details(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ SiteGPT", url="https://sitegpt.ai")]
    ])
    await callback.message.answer(
        "üõ† *SiteGPT*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ –∫–æ—Ñ–µ–π–Ω–∏'.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    await callback.answer()

@dp.message(F.text == "–ù–∞–∑–∞–¥ üîô")
async def go_back(message: Message):
    await message.answer(
        "‚ú® *–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )

@dp.message(F.text == "DALL-E")
async def show_dalle_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ DALL-E", url="https://openai.com/dall-e")]
    ])
    await message.answer(
        "üñº *DALL-E*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ù–∞–ø–∏—à–∏ '–ö–æ—Ç –≤ —à–ª—è–ø–µ –Ω–∞ –õ—É–Ω–µ', –∏ DALL-E –Ω–∞—Ä–∏—Å—É–µ—Ç —ç—Ç–æ!\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "ChatGPT")
async def show_chatgpt_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ChatGPT", url="https://openai.com/chatgpt")]
    ])
    await message.answer(
        "üìù *ChatGPT*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–µ—Ç —Å –∑–∞–¥–∞—á–∞–º–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ú–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Å—Å–µ, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø–∏—Å–∞—Ç–µ–ª–µ–π –∏ —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –∏–¥–µ–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "Notion AI")
async def show_notion_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Notion AI", url="https://www.notion.so/product/ai")]
    ])
    await message.answer(
        "üõ† *Notion AI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ú–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "10WEB")
async def show_10web_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ 10Web", url="https://10web.io")]
    ])
    await message.answer(
        "‚ú® *10Web*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç –≤–µ–±-—Å–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –î–∞–π –∑–∞–ø—Ä–æ—Å '–°–∞–π—Ç –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ', –∏ 10Web —Å–æ–∑–¥–∞—Å—Ç –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "RYTR")
async def show_rytr_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Rytr", url="https://rytr.me")]
    ])
    await message.answer(
        "üìù *Rytr*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—ã –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –¥–ª—è –±–∞–±—É—à–∫–∏', –∏ Rytr –ø—Ä–µ–¥–ª–æ–∂–∏—Ç 40 —à–∞–±–ª–æ–Ω–æ–≤.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤, –æ—Ç –ø–∏—Å–µ–º –¥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "SITEGPT")
async def show_sitegpt_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ SiteGPT", url="https://sitegpt.ai")]
    ])
    await message.answer(
        "üõ† *SiteGPT*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤, –æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ –∫–æ—Ñ–µ–π–Ω–∏ –≤ —Ç—ë–ø–ª–æ–º —Å—Ç–∏–ª–µ', –∏ SiteGPT —Å–æ–∑–¥–∞—Å—Ç –±–æ—Ç–∞.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "HEY GEN")
async def show_heygen_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ HeyGen", url="https://www.heygen.com")]
    ])
    await message.answer(
        "‚ú® *HeyGen*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò, –≤–∫–ª—é—á–∞—è –≥–æ–≤–æ—Ä—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–æ–∑–¥–∞–π —á–µ–ª–æ–≤–µ–∫–∞, –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–∏', –∏ HeyGen —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–µ–æ.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "GitHub Copilot")
async def show_copilot_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ GitHub Copilot", url="https://github.com/features/copilot")]
    ])
    await message.answer(
        "üíª *GitHub Copilot*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–¥ –ø—Ä—è–º–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python', –∏ Copilot –Ω–∞–ø–∏—à–µ—Ç –∫–æ–¥.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "Sora")
async def show_sora_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Sora", url="https://openai.com/sora")]
    ])
    await message.answer(
        "üé• *Sora*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫ –ø—Ä–æ –ª–µ—Å', –∏ Sora —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–µ–æ.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "Eleven Labs")
async def show_elevenlabs_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Eleven Labs", url="https://elevenlabs.io")]
    ])
    await message.answer(
        "üéß *Eleven Labs*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–ü—Ä–æ—á–∏—Ç–∞–π —Å–∫–∞–∑–∫—É', –∏ –ø–æ–ª—É—á–∏—à—å –æ–∑–≤—É—á–∫—É.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –æ–∑–≤—É—á–∫–∏, –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –∏ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@dp.message(F.text == "Perplexity AI")
async def show_perplexity_details(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Perplexity AI", url="https://www.perplexity.ai")]
    ])
    await message.answer(
        "üõ† *Perplexity AI*\n\n"
        "üî∏ *–û–ø–∏—Å–∞–Ω–∏–µ:* –ü–æ–∏—Å–∫–æ–≤–∏–∫ –Ω–∞ –ò–ò, –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –±—ã—Å—Ç—Ä–æ.\n"
        "üî∏ *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* –ü–æ–ø—Ä–æ—Å–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å', –∏ –ø–æ–ª—É—á–∏—à—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.\n"
        "üî∏ *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å:* –î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ —É—á—ë–±—ã.",
        parse_mode="Markdown",
        reply_markup=markup
    )

async def health_check(request):
    return web.Response(text="Bot is running")

app = web.Application()
app.router.add_get("/", health_check)

async def start_webserver():
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

async def main():
    await start_webserver()
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())